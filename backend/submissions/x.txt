#include <iostream>
#include <fstream>
#include <set>

using namespace std;

int main() {
    ifstream fin("SOLON2.INP"); // Mở file đầu vào
    ofstream fout("SOLON2.OUT"); // Mở file đầu ra

    int n;
    fin >> n; // Đọc số lượng phần tử

    set<int> unique_numbers; // Tập hợp để lưu các số duy nhất
    for (int i = 0; i < n; i++) {
        int x;
        fin >> x;
        unique_numbers.insert(x);
    }

    // Nếu không có đủ hai số khác nhau
    if (unique_numbers.size() < 2) {
        fout << "Không có số lớn thứ hai";
    } else {
        auto it = unique_numbers.rbegin(); // Lấy số lớn nhất
        ++it; // Lấy số lớn thứ hai
        fout << *it;
    }

    fin.close();
    fout.close();
    return 0;
}



Bài 2:
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

// Hàm kiểm tra số hoàn hảo
bool isPerfectNumber(int x) {
    if (x <= 1) return false;
    int sum = 1;
    for (int i = 2; i * i <= x; i++) { 
        if (x % i == 0) { 
            sum += i; 
            if (i != x / i) sum += x / i;
        }
    }
    return sum == x;
}

int main() {
    ifstream infile("HOANHAO.INP");
    ofstream outfile("HOANHAO.OUT");

    if (!infile || !outfile) return 1;

    vector<int> numbers;
    int num;
    while (infile >> num) {
        numbers.push_back(num);
    }

    infile.close();

    int sumPerfect = 0;
    for (int num : numbers) {
        if (isPerfectNumber(num)) {
            sumPerfect += num;
        }
    }

    // Chỉ ghi kết quả ra file, không ghi debug
    outfile << (sumPerfect > 0 ? sumPerfect : -1);
    outfile.close();

    return 0;
}



Bài 3:
#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int main() {
    ifstream infile("FIBO.INP");
    ofstream outfile("FIBO.OUT");

    if (!infile || !outfile) return 1; // Kiểm tra file mở thành công

    int n;
    infile >> n;

    vector<int> fibo(n);
    for (int i = 0; i < n; i++) {
        infile >> fibo[i];
    }

    infile.close(); // Đóng file sau khi đọc xong

    bool isFibonacci = true;
    
    // Kiểm tra tính chất Fibonacci
    for (int i = 2; i < n; i++) {
        if (fibo[i] != fibo[i - 1] + fibo[i - 2]) {
            isFibonacci = false;
            break;
        }
    }

    outfile << (isFibonacci ? 1 : 0);
    outfile.close(); // Đóng file sau khi ghi xong

    return 0;
}


Bài 4:
#include <iostream>
#include <fstream>

using namespace std;

int main() {
    ifstream infile("MAHOA.INP");
    ofstream outfile("MAHOA.OUT");

    if (!infile || !outfile) return 1; // Kiểm tra nếu mở file thất bại

    int K, N, P, Q;
    infile >> K >> N >> P >> Q;
    infile.close(); // Đóng file sau khi đọc xong

    int count = 0;
    
    // Duyệt tất cả giá trị T trong khoảng [K, N]
    for (int T = K; T <= N; T++) {
        if ((P * T) % Q == 0) {
            count++;
        }
    }

    outfile << count;
    outfile.close(); // Đóng file sau khi ghi xong

    return 0;
}



Bài 5: (chuẩn giây - 1 testcase)
#include <iostream>
#include <fstream>
#include <stack>
#include <set>
#include <sstream>

using namespace std;

// Hàm tách cụm dấu ngoặc nhanh hơn
set<pair<int, int>> extractGroups(const string &expr) {
    stack<int> stk;
    set<pair<int, int>> positions;

    for (int i = 0; i < expr.size(); i++) {
        if (expr[i] == '(') {
            stk.push(i);
        } else if (expr[i] == ')') {
            if (stk.empty()) {
                return {{-1, -1}}; // Lỗi cú pháp
            }
            int start = stk.top();
            stk.pop();
            positions.insert({start, i});
        }
    }

    if (!stk.empty()) return {{-1, -1}}; // Lỗi cú pháp

    return positions;
}

int main() {
    ifstream infile("CUM.INP");
    ofstream outfile("CUM.OUT");

    if (!infile || !outfile) {
        return 1; // Lỗi mở file
    }

    string line;
    getline(infile, line);
    infile.close();

    set<pair<int, int>> groups = extractGroups(line);

    ostringstream output;
    if (groups.begin()->first == -1) {
        output << "-1\n"; // Lỗi cú pháp
    } else {
        output << groups.size() << "\n";
        for (auto p : groups) {
            output << line.substr(p.first, p.second - p.first + 1) << "\n";
        }
    }

    outfile << output.str();
    outfile.close();
    return 0;
}



b5 c2: (2 test đúng - chậm time)
#include <iostream>
#include <fstream>
#include <stack>
#include <vector>

using namespace std;

// Hàm tách các cụm trong biểu thức
vector<string> extractGroups(const string &expr) {
    vector<string> groups;
    stack<int> stk;
    vector<pair<int, int>> positions;

    for (int i = 0; i < expr.size(); i++) {
        if (expr[i] == '(') {
            stk.push(i);
        } else if (expr[i] == ')') {
            if (stk.empty()) {
                return {"-1"}; // Lỗi cú pháp
            }
            int start = stk.top();
            stk.pop();
            positions.push_back({start, i});
        }
    }

    if (!stk.empty()) return {"-1"}; // Lỗi cú pháp

    for (auto p : positions) {
        groups.push_back(expr.substr(p.first, p.second - p.first + 1));
    }

    return groups;
}

int main() {
    ifstream infile("CUM.INP");
    ofstream outfile("CUM.OUT");

    if (!infile || !outfile) {
        return 1; // Lỗi mở file
    }

    string line;
    getline(infile, line);
    infile.close();

    vector<string> groups = extractGroups(line);

    if (groups[0] == "-1") {
        outfile << "-1" << endl; // Lỗi cú pháp
    } else {
        outfile << groups.size() << endl;
        for (const auto &g : groups) {
            outfile << g << endl;
        }
    }

    outfile.close();
    return 0;
}

c3 test: (1 dung - chậm time)
#include <iostream>
#include <fstream>
#include <stack>
#include <vector>
#include <set>

using namespace std;

// Hàm tách các cụm trong ngoặc từ trong ra ngoài
vector<string> extractInnerGroups(const string &expr) {
    vector<string> groups;
    stack<int> stk;
    set<pair<int, int>> positions;  // Sử dụng set để đảm bảo thứ tự duy nhất

    for (int i = 0; i < expr.size(); i++) {
        if (expr[i] == '(') {
            stk.push(i);
        } else if (expr[i] == ')') {
            if (stk.empty()) {
                return {"-1"}; // Lỗi cú pháp
            }
            int start = stk.top();
            stk.pop();
            positions.insert({start, i});
        }
    }

    if (!stk.empty()) return {"-1"}; // Lỗi cú pháp

    for (auto p : positions) {
        groups.push_back(expr.substr(p.first, p.second - p.first + 1));
    }

    return groups;
}

int main() {
    ifstream infile("CUM.INP");
    ofstream outfile("CUM.OUT");

    if (!infile || !outfile) {
        return 1; // Lỗi mở file
    }

    string line;
    getline(infile, line);
    infile.close();

    vector<string> groups = extractInnerGroups(line);

    if (groups[0] == "-1") {
        outfile << "-1" << endl; // Lỗi cú pháp
    } else {
        outfile << groups.size() << endl;
        for (const auto &g : groups) {
            outfile << g << endl;
        }
    }

    outfile.close();
    return 0;
}
