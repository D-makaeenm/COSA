def tinh_tong(a, b):
    return a + b
# Đọc input từ test case
so_1, so_2 = map(int, input().split(","))
tong = tinh_tong(so_1, so_2)
# In kết quả
print(tong)


def la_so_nguyen_to(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True
def liet_ke_so_nguyen_to(upper_limit):
    return [n for n in range(2, upper_limit) if la_so_nguyen_to(n)]
# Đọc input từ test case
gioi_han = int(input())
# Tính toán danh sách số nguyên tố
mang_nguyen_to = liet_ke_so_nguyen_to(gioi_han)
# In kết quả
print(",".join(map(str, mang_nguyen_to)))


def dao_nguoc_chuoi(s):
    return s[::-1]
# Đọc input từ test case
chuoi_dau_vao = input()
# Đảo ngược chuỗi
chuoi_dao_nguoc = dao_nguoc_chuoi(chuoi_dau_vao)
# In kết quả
print(chuoi_dao_nguoc)




exams: Cơ bản lần 2

numbers = [19, -2, 112, 0, -14]
max_number = numbers[0]
for num in numbers:
    if num > max_number:
        max_number = num
print(max_number)



numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
total = 0
for num in numbers:
    total += num
print(total)





# Nhận input từ hệ thống chấm bài (stdin)
start, end = map(int, input().split(","))

# Tìm các số chia hết cho 7 nhưng không phải bội số của 5
result = [num for num in range(start, end + 1) if num % 7 == 0 and num % 5 != 0]

# In kết quả dưới dạng danh sách số, cách nhau bởi dấu phẩy
print(",".join(map(str, result)))



def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)

def factorial_list(n):
    return [str(factorial(i)) for i in range(1, n + 1)]

# Nhận input từ test case
n = int(input().strip())
output = ",".join(factorial_list(n))
print(output)
