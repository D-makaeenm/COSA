# Đọc dữ liệu từ file input
with open("SOLON2.INP", "r") as f:
    n = int(f.readline().strip())
    a = list(map(int, f.readline().split()))
unique_numbers = sorted(set(a), reverse=True)
with open("SOLON2.OUT", "w") as f:
    f.write(str(unique_numbers[1]) + "\n")



def is_perfect_number(x):
    if x < 2:
        return False
    sum_divisors = 1  # Luôn có 1 là ước của mọi số
    sqrt_x = int(x ** 0.5)
    for i in range(2, sqrt_x + 1):
        if x % i == 0:
            sum_divisors += i
            if i != x // i:  # Tránh cộng hai lần nếu i * i = x
                sum_divisors += x // i
    return sum_divisors == x
with open("HOANHAO.INP", "r") as f:
    a = list(map(int, f.readline().split()))  # Đọc tất cả số trên một dòng
perfect_sum = sum(x for x in a if is_perfect_number(x))
with open("HOANHAO.OUT", "w") as f:
    f.write(str(perfect_sum if perfect_sum > 0 else -1) + "\n")



with open("FIBO.INP", "r") as f:
    n = int(f.readline().strip())  # Đọc số lượng phần tử
    fib_numbers = list(map(int, f.readline().split()))  # Đọc dãy số
is_fibo = all(fib_numbers[i] == fib_numbers[i - 1] + fib_numbers[i - 2] for i in range(2, n))
with open("FIBO.OUT", "w") as f:
    f.write("1\n" if is_fibo else "0\n")



with open("MAHOA.INP", "r") as f:
    K, N, P, Q = map(int, f.readline().split())  # Đọc 4 số nguyên từ file
count = sum(1 for T in range(K, N + 1) if (P * T) % Q == 0)
with open("MAHOA.OUT", "w") as f:
    f.write(str(count) + "\n")



import re

def extract_clusters(expression):
    stack = []
    clusters = []
    for i, char in enumerate(expression):
        if char == "(":
            stack.append(i)  # Lưu vị trí dấu mở ngoặc
        elif char == ")":
            if stack:
                start = stack.pop()  # Lấy vị trí mở ngoặc gần nhất
                clusters.append(expression[start + 1:i])  # Lấy nội dung bên trong
            else:
                return -1  # Nếu có dấu ")" nhưng không có "(", lỗi cú pháp
    if stack:  # Nếu còn dấu "(" chưa đóng, cũng là lỗi cú pháp
        return -1
    return clusters
with open("CUM.INP", "r") as f:
    expression = f.readline().strip()
clusters = extract_clusters(expression)
with open("CUM.OUT", "w") as f:
    if clusters == -1:
        f.write("-1\n")  # Lỗi cú pháp
    else:
        f.write(str(len(clusters)) + "\n")  # Số lượng cụm
        for cluster in clusters:
            f.write(f"({cluster})\n")  # Giữ nguyên dấu ngoặc theo đề bài


nhiều testcase:

import re

def extract_clusters(expression):
    stack = []
    clusters = []
    for i, char in enumerate(expression):
        if char == "(":
            stack.append(i)
        elif char == ")":
            if stack:
                start = stack.pop()
                clusters.append(expression[start:i+1])
            else:
                return -1
    if stack:
        return -1
    return clusters

with open("CUM.INP", "r", encoding="utf-8") as f:
    lines = f.readlines()

num_testcases = int(lines[0].strip())
testcases = [line.strip() for line in lines[1:num_testcases+1]]

with open("CUM.OUT", "w", encoding="utf-8") as f:
    f.write(str(num_testcases) + "\n")
    for testcase in testcases:
        clusters = extract_clusters(testcase)
        if clusters == -1:
            f.write("-1\n")
        else:
            f.write(str(len(clusters)) + "\n")
            for cluster in clusters:
                f.write(cluster + "\n")

cum.inp:
2
(a+b)*(c-d)
x*((x+1)/(y+1))
cum.out:
2
2
(a+b)
(c-d)
3
(x+1)
(y+1)
((x+1)/(y+1))
