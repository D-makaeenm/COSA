import React from "react";
import { useOutletContext } from "react-router-dom";
import icons from "../../../FontAwesome/icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import styles from "./ContestInfo.module.css";
import { Tooltip } from "react-tooltip";
import { format } from "date-fns";
import { vi } from "date-fns/locale";
import * as XLSX from "xlsx";

function ContestInfo1() {
    const {
        contestInfo,
        handleRemoveParticipant,
        handleEditContestClick,
        handleEditContestDetailsClick,
        handleAddStudenttoContest,
    } = useOutletContext();

    const formatDateTime = (dateTimeString) => {
        const date = new Date(dateTimeString);
        return format(date, "HH:mm:ss EEEE dd/MM/yyyy", { locale: vi });
    };

    // üü¢ Export Excel bao g·ªìm ƒëi·ªÉm t·ª´ng b√†i
    const handleExportDataContest = () => {
        if (!contestInfo || !contestInfo.participants.length) {
            alert("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!");
            return;
        }
    
        const maxBai = contestInfo.participants.reduce(
            (max, p) => Math.max(max, p.submissions?.length || 0),
            0
        );
    
        const exportData = contestInfo.participants.map((participant, index) => {
            let row = {
                "STT": index + 1,
                "Username": participant.username || "",
                "H·ªç v√† t√™n": participant.name || "",
                "Th·ª© h·∫°ng": participant.rank || "",
            };
    
            for (let i = 0; i < maxBai; i++) {
                row[`B√†i ${i + 1}`] = participant.submissions?.[i] ?? "-";
            }
    
            row["T·ªïng ƒëi·ªÉm"] = participant.score ?? 0;
            row["Ghi ch√∫"] = "";
            return row;
        });
    
        const wb = XLSX.utils.book_new();
    
        // ‚úÖ T·∫°o sheet t·ª´ data, b·∫Øt ƒë·∫ßu t·ª´ A2 ƒë·ªÉ tr·ªëng d√≤ng 1
        const ws = XLSX.utils.json_to_sheet(exportData, { origin: "A2" });
    
        // ‚úÖ Ch√®n ti√™u ƒë·ªÅ v√†o A1
        XLSX.utils.sheet_add_aoa(ws, [["Danh s√°ch k·∫øt qu·∫£ thi"]], { origin: "A1" });
    
        // ‚úÖ Merge √¥ t·ª´ A1 ƒë·∫øn c·ªôt cu·ªëi c√πng (v√≠ d·ª•: G1)
        const totalColumns = Object.keys(exportData[0]).length;
        const lastColumn = String.fromCharCode(65 + totalColumns - 1); // Chuy·ªÉn s·ªë sang ch·ªØ (A, B, ..., Z)
    
        ws['!merges'] = [
            { s: { r: 0, c: 0 }, e: { r: 0, c: totalColumns - 1 } }  // Merge t·ª´ A1 ƒë·∫øn lastColumn1
        ];
    
        XLSX.utils.book_append_sheet(wb, ws, "Danh s√°ch");
        XLSX.writeFile(wb, `Danh_sach_ThiSinh_${contestInfo.title}.xlsx`);
    };
    
    
    

    const maxSubmissions = contestInfo.participants.reduce(
        (max, p) => Math.max(max, p.submissions?.length || 0),
        0
    );

    return (
        <div>
            <div className={styles.header}>
                <div className={styles.title}>
                    <h1>{contestInfo.title}</h1>

                    <div id="edit-contest" className={styles.editContest} onClick={handleEditContestClick}>
                        <FontAwesomeIcon icon={icons.pen} />
                    </div>
                    <Tooltip anchorId="edit-contest" content="S·ª≠a th√¥ng tin c∆° b·∫£n" />

                    <div id="contest-details" className={styles.editContest} onClick={handleEditContestDetailsClick}>
                        <FontAwesomeIcon icon={icons.info} />
                    </div>
                    <Tooltip anchorId="contest-details" content="S·ª≠a th√¥ng tin chi ti·∫øt" />

                    <div id="add-student-contest" className={styles.editContest} onClick={handleAddStudenttoContest}>
                        <FontAwesomeIcon icon={icons.circleplus} />
                    </div>
                    <Tooltip anchorId="add-student-contest" content="Th√™m th√≠ sinh" />

                    <button id="export-data" className={styles.editContest} onClick={handleExportDataContest}><FontAwesomeIcon icon={icons.chart} /></button>
                    <Tooltip anchorId="export-data" content="Xu·∫•t b√°o c√°o" />
                </div>

                <div className={styles.author}>
                    <p>Ng∆∞·ªùi t·∫°o: {contestInfo.creator_name}</p>
                    <p>Th·ªùi gian b·∫Øt ƒë·∫ßu: {formatDateTime(contestInfo.start_time)}</p>
                    <p>Th·ªùi gian k·∫øt th√∫c: {formatDateTime(contestInfo.end_time)}</p>
                </div>
            </div>

            <table className={styles.table}>
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>H·ªç v√† t√™n</th>
                        <th>Th·ª© h·∫°ng</th>
                        {Array.from({ length: maxSubmissions }).map((_, index) => (
                            <th key={index}>B√†i {index + 1}</th>
                        ))}
                        <th>T·ªïng ƒëi·ªÉm</th>
                        <th>Ghi ch√∫</th>
                        <th>H√†nh ƒë·ªông</th>
                    </tr>
                </thead>

                <tbody>
                    {contestInfo.participants.map((participant, index) => (
                        <tr key={index}>
                            <td>{participant.username}</td>
                            <td>{participant.name}</td>
                            <td>{participant.rank}</td>

                            {Array.from({ length: maxSubmissions }).map((_, subIndex) => (
                                <td key={subIndex}>
                                    {participant.submissions?.[subIndex] ?? "-"}
                                </td>
                            ))}
                            <td>{participant.score}</td>
                            <td></td>
                            <td>
                                <button
                                    className={styles.remove_button}
                                    onClick={() => handleRemoveParticipant(participant.username)}
                                >
                                    X√≥a
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
}

export default ContestInfo1;
